#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer InputBlades {
    Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

// Wind Constants
const float WIND_POWER  = 23.0;
const float WIND_SPEED  = 6.0;
const float WAVE_LENGTH = 1.5;

const float WIND_WEIBULL_SHAPE = 2.0;  // Weibull shape parameter (k)
const float WIND_WEIBULL_SCALE = 6.0;  // Weibull scale parameter (Î»)
const float WIND_TURBULENCE = 0.2;     // How much random variation
const float WIND_GUST_STRENGTH = 1.5;  // Strength of wind gusts
const float WIND_GUST_FREQUENCY = 0.2; // Frequency of gusts

const float B_ORIENT    = 0.9;
const float TOLERANCE   = -0.05;
const float D_MAX_CFG   = 8.0;

// Hash function for pseudo-random numbers
float hash(vec3 p) {
    p = fract(p * vec3(443.897, 441.423, 437.195));
    p += dot(p, p.yzx + 19.19);
    return fract((p.x + p.y) * p.z);
}

// 3D noise function for wind variation
float noise3D(vec3 p) {
    vec3 i = floor(p);
    vec3 f = fract(p);
    vec3 u = f * f * (3.0 - 2.0 * f);
    
    float a = hash(i);
    float b = hash(i + vec3(1.0, 0.0, 0.0));
    float c = hash(i + vec3(0.0, 1.0, 0.0));
    float d = hash(i + vec3(1.0, 1.0, 0.0));
    float e = hash(i + vec3(0.0, 0.0, 1.0));
    float f1 = hash(i + vec3(1.0, 0.0, 1.0));
    float g = hash(i + vec3(0.0, 1.0, 1.0));
    float h = hash(i + vec3(1.0, 1.0, 1.0));
    
    float k0 = a;
    float k1 = b - a;
    float k2 = c - a;
    float k3 = e - a;
    float k4 = a - b - c + d;
    float k5 = a - c - e + g;
    float k6 = a - b - e + f1;
    float k7 = -a + b + c - d + e - f1 - g + h;
    
    return k0 + k1 * u.x + k2 * u.y + k3 * u.z + 
           k4 * u.x * u.y + k5 * u.y * u.z + k6 * u.z * u.x + 
           k7 * u.x * u.y * u.z;
}

// Weibull distribution for wind speed
float weibullDistribution(float x, float k, float lambda) {
    if (x < 0.0) return 0.0;
    return (k / lambda) * pow(x / lambda, k - 1.0) * exp(-pow(x / lambda, k));
}

vec3 GetWindDirection(vec3 v0) {
    // Base direction with some spatial variation
    vec3 baseDir = normalize(-vec3(1, 0, 1));
    
    // Add spatial variation to direction
    float nx = noise3D(v0 * 0.05 + vec3(0.0, 0.0, totalTime * 0.1));
    float nz = noise3D(v0 * 0.05 + vec3(totalTime * 0.1, 0.0, 0.0));
    
    vec3 windVar = vec3(nx * 0.4 - 0.2, 0.0, nz * 0.4 - 0.2);
    return normalize(baseDir + windVar);
}

vec3 GetWind(vec3 v0, vec3 v2, vec3 up, float h) {
    vec3 windDir = GetWindDirection(v0);
    
    // Basic phase for wave motion
    float phase = (dot(v0, windDir) - WIND_SPEED * totalTime) / WAVE_LENGTH;
    
    // Apply Weibull distribution to modulate wind speed
    float timeScale = totalTime * 0.5;
    float speedFactor = weibullDistribution(fract(timeScale) * 10.0, WIND_WEIBULL_SHAPE, WIND_WEIBULL_SCALE);
    speedFactor = mix(0.5, 1.5, speedFactor);
    
    // Wind variation based on noise and position
    vec3 noisePos = v0 * 0.1 + vec3(0.0, 0.0, totalTime * 0.2);
    float turbulence = noise3D(noisePos) * WIND_TURBULENCE;
    
    // Add wind gusts
    float gustPhase = totalTime * WIND_GUST_FREQUENCY;
    float gustNoise = noise3D(vec3(gustPhase, 0.0, 0.0));
    float gust = smoothstep(0.7, 1.0, gustNoise) * WIND_GUST_STRENGTH;
    
    // Combine wave motion with noise
    float waveCoeff = cos(phase) * (1.0 + turbulence + gust) * speedFactor;
    
    // Calculate how the blade is affected based on orientation
    float f_d = 1.0 - abs(dot(windDir, normalize(v2 - v0)));
    float f_r = dot(v2 - v0, up) / h;
    float theta = f_d * f_r;
    
    // Scale by height to make taller grass more affected
    float heightFactor = clamp(h / 1.0, 0.5, 1.5);
    
    return windDir * WIND_POWER * waveCoeff * theta * heightFactor;
}

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool IsPointInFrustum(vec3 pointPos, mat4 VP, float tolerance) {
    vec4 p_clip = VP * vec4(pointPos, 1.0);
    float h = p_clip.w + tolerance;
    bool in_bounds = inBounds(p_clip.x, h) && inBounds(p_clip.y, h) && inBounds(p_clip.z, h);
    return in_bounds;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
        numBlades.instanceCount = 1;
        numBlades.firstVertex = 0;
        numBlades.firstInstance = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade blade = inputBlades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;

    float angle = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiff = blade.up.w;

    // 5.1 Natural Forces
    vec3 dir        = normalize(v2 - v0);
    vec3 width_dir  = vec3(sin(angle), 0, cos(angle));
    vec3 f          = normalize(cross(up, width_dir));

    float c_strength    = 1.0;
    float alpha         = 0.2;
    float eta           = max(c_strength - alpha * deltaTime, 0.0);
    float damp          = max(1.0 - eta, 0.1);
    vec3 iv2            = v0 + normalize(up) * height;
    vec3 recovery       = (iv2 - v2) * stiff * damp;
    
    vec3 gE = vec3(0, -9.8, 0);
    vec3 gF = 0.25 * length(gE) * f;
    vec3 gravity = gE + gF;

    vec3 wind = GetWind(v0, v2, up, height);
    
    vec3 tv2 = (recovery + gravity + wind) * deltaTime;
    v2 = v2 + tv2;

    // 5.2 State Validation
    v2 = v2 - up * min(dot(up, (v2 - v0)), 0);
    float l_proj = length(v2 - v0 - up * dot((v2 - v0), up));
    v1 = v0 + height * up * max(1.0 - (l_proj / height), 0.05 * max((l_proj / height), 1.0));
    
    float L0 = length(v2 - v0); // distance between the first and the last control point
    float L1 = length(v1 - v0) + length(v2 - v1);   // the sum of all distances between a control point
    float n = 2.f;  // degree n
    float L = (2.f * L0 + (n - 1.0) * L1) / (n + 1.0);

    float r = height / L;
    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    blade.v1.xyz = v1;
    blade.v2.xyz = v2;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    // Orientation test
    vec3 cam = vec3(camera.view[0].z, camera.view[1].z, camera.view[2].z);
    vec3 dir_c = normalize(cam);
    if(!inBounds(dot(dir, dir_c), B_ORIENT))
    {
        return;
    }
    
    // View-frustum test
    mat4 VP = camera.proj * camera.view;
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    bool v0_visible = IsPointInFrustum(blade.v0.xyz, VP, TOLERANCE);
    bool m_visible  = IsPointInFrustum(m, VP, TOLERANCE);
    bool v2_visible = IsPointInFrustum(blade.v2.xyz, VP, TOLERANCE);
    if (!(v0_visible || m_visible || v2_visible)) {
        return;
    }

    // Distance test
    const int N_LEVELS = 8;
    float d_proj = length(cam - up * dot(cam, up));
    float keepRatio = 1.0 - (d_proj / D_MAX_CFG);
    int k = int(floor(max(0.0, float(N_LEVELS) * keepRatio)));
    if ((gl_GlobalInvocationID.x % N_LEVELS) >= k) {
         return;
    }

    uint idx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[idx] = blade;
}
