#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) readonly buffer InputBlades {
    Blade blades[];
} inputBlades;

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade blades[];
} culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

vec3 GetGravity(vec3 f) {
    vec4 D  = vec4(0, -1.0, 0, 1);
    vec3 gE = normalize(D.xyz) * D.w;
    vec3 gF = 0.25 * length(gE) * f;
    return gE + gF;
}

vec3 GetWindDirection(vec3 v0, float amplitude, float frequency, float wavelength) {
    return 0.25 * amplitude * vec3(
        sin(totalTime * 3.0 / frequency + v0.x * 0.1 * 11 / wavelength),
        0,
        sin(totalTime * 3.0 / frequency + v0.z * 0.2 * 11 / wavelength) * 0.1
    );
}

vec3 GetWind(vec3 v0, vec3 v2, vec3 up, float h) {
    vec3 wi = GetWindDirection(v0, 60.0, 1.2, 0.5);
    float f_d = 1.0 - abs(dot(normalize(wi), normalize(v2 - v0)));
    float f_r = dot(v2 - v0, up) / h;
    float theta = f_d * f_r;
    return wi * theta;
}

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool IsPointInFrustum(vec3 pointPos, mat4 VP, float tolerance) {
    vec4 p_clip = VP * vec4(pointPos, 1.0);
    float h = p_clip.w + tolerance;
    bool in_bounds = inBounds(p_clip.x, h) && inBounds(p_clip.y, h) && inBounds(p_clip.z, h);
    return in_bounds;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount   = 0;
        numBlades.instanceCount = 1;
        numBlades.firstVertex   = 0;
        numBlades.firstInstance = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade blade = inputBlades.blades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;

    float angle = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiff = blade.up.w;

    // Calculate Force
    vec3 dir = vec3(cos(angle), 0, sin(angle));
    vec3 f = normalize(cross(dir, up));
    f = f * ((dot(f, v2 - v0) > 0) ? 1 : -1);

    vec3 recovery = (v0 + up * height - v2) * stiff;
    vec3 tv2 = (recovery + 0.1 * GetGravity(f) + GetWind(v0, v2, up, height)) * deltaTime;
    v2 = v2 + tv2;

    // 5.2 State Validation
    v2 = v2 - up * min(dot(up, (v2 - v0)), 0);
    float l_proj = length(v2 - v0 - up * dot((v2 - v0), up));
    v1 = v0 + height * up * max(1.0 - (l_proj / height), 0.05 * max((l_proj / height), 1.0));
    
    float L0 = length(v2 - v0); // distance between the first and the last control point
    float L1 = length(v1 - v0) + length(v2 - v1);   // the sum of all distances between a control point
    float n = 2.f;  // degree n
    float L = (2.f * L0 + (n - 1.0) * L1) / (n + 1.0);

    float r = height / L;
    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    blade.v1.xyz = v1;
    blade.v2.xyz = v2;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads 
    
    // Orientation test
    vec3 cam = vec3(camera.view[0].z, camera.view[1].z, camera.view[2].z);
    vec3 dir_c = normalize(cam);
    if(!inBounds(dot(dir, dir_c), 0.9))
    {
        return;
    }
    
    // View-frustum test
    mat4 VP = camera.proj * camera.view;
    float tolerance = 0.05;
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    bool v0_visible = IsPointInFrustum(blade.v0.xyz, VP, tolerance);
    bool m_visible = IsPointInFrustum(m, VP, tolerance);
    bool v2_visible = IsPointInFrustum(blade.v2.xyz, VP, tolerance);
    if (!(v0_visible || m_visible || v2_visible)) {
        return;
    }

    // Distance test
    const float D_MAX = 10.0;
    const int N_LEVELS = 8;
    float d_proj = length(cam - up * dot(cam, up));
    float keepRatio = 1.0 - (d_proj / D_MAX);
    int k = int(floor(max(0.0, float(N_LEVELS) * keepRatio)));
    if ((gl_GlobalInvocationID.x % N_LEVELS) >= k) {
         return;
    }
    
    uint idx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades.blades[idx] = blade;
}
